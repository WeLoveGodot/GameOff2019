on:
  push:
    tags:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    name: build game
    steps:
    - uses: actions/checkout@v1
    # - name: Setup Docker
    #   uses: aBARICHELLO/godot-ci@v3.1.1
    - name: Setup Godot
      run: |
        wget -q https://downloads.tuxfamily.org/godotengine/3.1.1/Godot_v3.1.1-stable_linux_headless.64.zip
        mkdir ~/.cache
        mkdir -p ~/.config/godot
        unzip Godot_v3.1.1-stable_linux_headless.64.zip
        mv Godot_v3.1.1-stable_linux_headless.64 ~/godot
        chmod +x ~/godot
    - name: Setup Godot Template
      run: |
        wget -q https://downloads.tuxfamily.org/godotengine/3.1.1/Godot_v3.1.1-stable_export_templates.tpz
        unzip Godot_v3.1.1-stable_export_templates.tpz
        mkdir -p ~/.local/share/godot/templates/3.1.1.stable
        mv templates/* ~/.local/share/godot/templates/3.1.1.stable
        rm -f Godot_v3.1.1-stable_export_templates.tpz
    - name: Build Game
      run: |
        # debug
        # where i am
        echo "==> pwd"
        pwd
        # tell me
        echo "==> ls"
        ls

        echo "==> ls templates"
        ls ~/.local/share/godot/templates/3.1.1.stable

        echo "==> start build"

        # Export for Windows
        echo "==> building windows"
        mkdir -p win64
        HOME=~ && ~/godot --export "Windows Desktop" project.godot "win64/dark-forest.exe"
        zip windows ./build/windows

        # Export for linux
        echo "==> building linux"
        mkdir -p linux64
        HOME=~ && ~/godot --export "Linux/X11" project.godot "linux64/dark-forest"
        zip linux ./build/linux

        # Export for OSX
        echo "==> building mac"
        mkdir -p mac
        HOME=~ && ~/godot --export "Mac OSX" project.godot "mac/dark-forest"
        zip max ./build/mac

        echo "==> building finish"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./windows
        asset_name: windows.zip
        asset_content_type: application/zip